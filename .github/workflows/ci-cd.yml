name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**/*.md'
      - '.gitignore'
      - '.editorconfig'
      - 'docs/**'

permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: write
  id-token: write
  pages: write
  deployments: write

# Konfiguracja środowiska
env:
  DOCS_PATH: 'docs'
  GITHUB_PAGES_URL: '${{ github.repository_owner }}.github.io'
  REPOSITORY_NAME: '${{ github.event.repository.name }}'

jobs:
  # 1. Semantic Release - najpierw generujemy nową wersję
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      packages: read
    outputs:
      version: ${{ steps.semantic.outputs.new_release_version }}
      version_numeric: ${{ steps.extract.outputs.version_numeric }}
      channel: ${{ github.ref == 'refs/heads/main' && 'latest' || 'beta' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install dependencies
        run: |
          npm install --no-package-lock --no-save \
            semantic-release@21.0.1 \
            @semantic-release/commit-analyzer \
            @semantic-release/release-notes-generator \
            @semantic-release/github \
            @semantic-release/exec \
            @semantic-release/changelog \
            @semantic-release/git

      - name: Debug Environment
        run: |
          echo "GITHUB_REF: $GITHUB_REF"
          echo "GITHUB_REF_NAME: $GITHUB_REF_NAME"
          echo "github.ref: ${{ github.ref }}"
          echo "github.ref_name: ${{ github.ref_name }}"
          echo "Current branch: $(git rev-parse --abbrev-ref HEAD)"

      - name: Semantic Release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
        run: |
          # Debug semantic-release configuration
          echo "Semantic Release Configuration:"
          cat .releaserc.json
          
          # Debug environment variables
          echo "Environment Variables:"
          echo "GITHUB_REF_NAME: $GITHUB_REF_NAME"
          echo "Current branch: $(git rev-parse --abbrev-ref HEAD)"
          
          # Enable debug mode for semantic-release
          export DEBUG=semantic-release:*
          
          # Uruchom semantic-release i zapisz output
          echo "Running semantic-release..."
          SEMANTIC_OUTPUT=$(npx semantic-release --debug || echo "SEMANTIC_RELEASE_FAILED")
          echo "Semantic Release Output: $SEMANTIC_OUTPUT"
          
          if [[ "$SEMANTIC_OUTPUT" == *"SEMANTIC_RELEASE_FAILED"* ]]; then
            echo "Semantic Release failed, checking for existing tags..."
          
            # Check if there are any tags
            if git tag -l | grep -q "v"; then
              # Pobierz najnowszy tag
              VERSION=$(git describe --tags --abbrev=0)
              echo "Using existing tag: $VERSION"
            else
              # Fallback to a default version
              VERSION="v0.0.1"
              echo "No tags found, using default version: $VERSION"
            fi
          else
            # Pobierz najnowszy tag
            VERSION=$(git describe --tags --abbrev=0)
            echo "New release created, tag: $VERSION"
          fi
          
          echo "Latest Tag: $VERSION"
          
          # Ustaw zmienną wyjściową
          echo "new_release_version=${VERSION#v}" >> $GITHUB_OUTPUT
          echo "Version Output: ${VERSION#v}"
          
          # List all commits since last tag for debugging
          echo "Commits since last tag:"
          git log $(git describe --tags --abbrev=0)..HEAD --oneline

      # Dodaj krok do ekstrakcji wersji numerycznej bez części prerelease
      - name: Extract numeric version
        id: extract
        run: |
          VERSION="${{ steps.semantic.outputs.new_release_version }}"
          VERSION_NUM=$(echo $VERSION | cut -d'-' -f1)
          echo "version_numeric=$VERSION_NUM" >> $GITHUB_OUTPUT
          echo "Numeric version for .NET assembly: $VERSION_NUM"

  # 2. Build i testy - teraz z nową wersją
  build:
    needs: release  # Zależność od job release
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write  # dla testów
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Build and Test
        run: |
          dotnet restore
          
          # Wyświetl wersje z kroku release
          echo "Semantic version: ${{ needs.release.outputs.version }}"
          echo "Assembly version: ${{ needs.release.outputs.version_numeric }}.0"
          
          # Buduj projekt z nadpisaniem wersji
          dotnet build --no-restore --configuration Release \
            -p:Version=${{ needs.release.outputs.version }} \
            -p:AssemblyVersion=${{ needs.release.outputs.version_numeric }}.0 \
            -p:FileVersion=${{ needs.release.outputs.version_numeric }}.0 \
            -p:InformationalVersion=${{ needs.release.outputs.version }}
          
          # Upewnij się, że katalog testów istnieje
          mkdir -p TestResults
          
          # Znajdź projekty testowe
          TEST_PROJECTS=$(find . -name "*.Tests.csproj" -o -name "*Tests.csproj")
          if [ -z "$TEST_PROJECTS" ]; then
            echo "No test projects found!"
          else
            echo "Found test projects: $TEST_PROJECTS"
            
            # Instaluj potrzebne pakiety do testów
            for PROJECT in $TEST_PROJECTS; do
              dotnet add "$PROJECT" package coverlet.msbuild || echo "Coverlet already installed or not applicable for $PROJECT"
            done
            
            # Uruchom testy z generowaniem raportu
            dotnet test --no-build --configuration Release \
              --logger "trx;LogFileName=testresults.trx" \
              --results-directory ./TestResults \
              /p:CollectCoverage=true \
              /p:CoverletOutputFormat=cobertura \
              /p:CoverletOutput=./TestResults/coverage.cobertura.xml \
              || echo "Tests completed with failures"
            
            # Upewnij się, że pliki istnieją
            find ./TestResults -type f -name "*.trx" -o -name "*.xml" | while read -r file; do
              echo "Generated test report: $file"
            done
          fi

      - name: Generate Coverage Report
        continue-on-error: true
        run: |
          # Zainstaluj narzędzie ReportGenerator
          dotnet tool install -g dotnet-reportgenerator-globaltool || echo "ReportGenerator already installed"
          
          # Sprawdź, czy istnieją pliki coverage przed próbą generowania raportów
          COVERAGE_FILES=$(find ./TestResults -name "*.xml" 2>/dev/null)
          if [ -n "$COVERAGE_FILES" ]; then
            echo "Found coverage files: $COVERAGE_FILES"
            mkdir -p TestResults/coveragereport
            reportgenerator -reports:TestResults/*.xml -targetdir:TestResults/coveragereport -reporttypes:HtmlInline_AzurePipelines || echo "ReportGenerator failed"
          else
            echo "No coverage files found. Skipping report generation."
            # Tworzymy pusty katalog, aby uniknąć błędów w kroku upload
            mkdir -p TestResults/coveragereport
            touch TestResults/coveragereport/index.html  # Dodaj pusty plik, aby uniknąć błędów
          fi
          
          # Lista wszystkich wygenerowanych plików
          find ./TestResults -type f | sort

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: TestResults/
          retention-days: 1
          if-no-files-found: warn

      - name: Publish
        run: |
          # Publikuj z tymi samymi właściwościami wersji
          dotnet publish src/CardActions.Api/CardActions.Api.csproj -c Release -o publish \
            -p:Version=${{ needs.release.outputs.version }} \
            -p:AssemblyVersion=${{ needs.release.outputs.version_numeric }}.0 \
            -p:FileVersion=${{ needs.release.outputs.version_numeric }}.0 \
            -p:InformationalVersion=${{ needs.release.outputs.version }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: api-artifact
          path: publish/
          retention-days: 1

  # 3. Build i push Docker image
  docker:
    needs: [release, build]  # Zależność od obu job'ów
    if: needs.release.outputs.version != ''
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      security-events: write  # dla SBOM i provenance
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: api-artifact
          path: publish/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository_owner }}/cardactions-api
          tags: |
            type=raw,value=${{ needs.release.outputs.version }}
            type=semver,pattern={{version}},value=${{ needs.release.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.release.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.release.outputs.version }}
            type=raw,value=${{ needs.release.outputs.channel }}
            type=sha,prefix=${{ needs.release.outputs.channel }}-
          flavor: |
            latest=auto
            prefix=
            suffix=
          labels: |
            org.opencontainers.image.title=CardActions API
            org.opencontainers.image.description=Card Actions API for Millennium Project
            org.opencontainers.image.version=${{ needs.release.outputs.version }}
            org.opencontainers.image.created=${{ github.event.repository.updated_at }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version.channel=${{ needs.release.outputs.channel }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.licenses=MIT

      - name: Read README.md
        id: readme
        run: |
          README_CONTENT=$(cat README.md)
          README_CONTENT="${README_CONTENT//'%'/'%25'}"
          README_CONTENT="${README_CONTENT//$'\n'/'%0A'}"
          README_CONTENT="${README_CONTENT//$'\r'/'%0D'}"
          echo "content=$README_CONTENT" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: publish/
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            ${{ steps.meta.outputs.labels }}
            org.opencontainers.image.documentation=${{ steps.readme.outputs.content }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

  # 4. Deploy dokumentacji do GitHub Pages
  deploy-docs:
    needs: release
    if: needs.release.outputs.version != '' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
      contents: read
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    outputs:
      page_url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          enablement: true

      - name: Prepare Documentation
        run: |
          mkdir -p docs-build
          cp README.md docs-build/index.md
          
          # Dodaj config.json z informacjami o wersji
          cat > docs-build/config.json << EOF
          {
            "version": "${{ needs.release.outputs.version }}",
            "channel": "${{ needs.release.outputs.channel }}",
            "apiUrl": "ghcr.io/${{ github.repository_owner }}/cardactions-api:${{ needs.release.outputs.version }}"
          }
          EOF

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs-build

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Display deployment URL
        run: |
          echo "Documentation deployed to: ${{ steps.deployment.outputs.page_url }}"
          echo "page_url=${{ steps.deployment.outputs.page_url }}" >> $GITHUB_OUTPUT

  # 5. Deploy to environments
  deploy:
    needs: [ docker, release ]
    if: needs.release.outputs.version != ''
    runs-on: ubuntu-latest
    permissions:
      contents: write
      deployments: write
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
      url: ${{ steps.service_details.outputs.service_url }}
    outputs:
      environment_url: ${{ steps.service_details.outputs.service_url }}
      environment_name: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
      current_branch: ${{ github.ref }}
    steps:
      - name: Debug environment
        run: |
          echo "Current branch: ${{ github.ref }}"
          echo "Environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}"
          echo "Channel: ${{ needs.release.outputs.channel }}"
          echo "Version: ${{ needs.release.outputs.version }}"
      - name: Deploy to Render
        id: deploy
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}

      - name: Get service details
        id: service_details
        run: |
          SERVICE_DETAILS=$(curl -s -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}")
          
          echo "Service details: $SERVICE_DETAILS"
          
          # Extract URL using grep and sed instead of jq
          SERVICE_URL=$(echo $SERVICE_DETAILS | grep -o '"url":"[^"]*"' | sed 's/"url":"//;s/"//')
          
          if [ -z "$SERVICE_URL" ]; then
            # Fallback to hardcoded URL based on environment
            if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              SERVICE_URL="https://cardactions-api-latest.onrender.com"
            else
              SERVICE_URL="https://cardactions-api-beta.onrender.com"
            fi
          fi
          
          echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "Service URL: $SERVICE_URL"

      - name: Update service image
        run: |
          curl -X PATCH \
          -H "Accept: application/json" \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}" \
          -d '{
            "imageTag": "${{ needs.release.outputs.version }}"
          }'

      - name: Set environment variables
        run: |
          curl -X PATCH \
          -H "Accept: application/json" \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/env-vars" \
          -d '{
            "envVars": [
              {
                "key": "ASPNETCORE_ENVIRONMENT",
                "value": "${{ github.ref == 'refs/heads/main' && 'Production' || 'Development' }}"
              },
              {
                "key": "APP_VERSION",
                "value": "${{ needs.release.outputs.version }}"
              }
            ]
          }'

      - name: Create Deployment Config
        id: create_config
        run: |
          # Set documentation URL
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            DOCS_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
            ENV_NAME="production"
          else
            DOCS_URL="https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/blob/develop/README.md"
            ENV_NAME="development"
          fi
          echo "docs_url=$DOCS_URL" >> $GITHUB_OUTPUT
          echo "env_name=$ENV_NAME" >> $GITHUB_OUTPUT
          
          # Get service URL
          SERVICE_URL="${{ steps.service_details.outputs.service_url }}"
          if [ -z "$SERVICE_URL" ]; then
            if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              SERVICE_URL="https://cardactions-api-latest.onrender.com"
            else
              SERVICE_URL="https://cardactions-api-beta.onrender.com"
            fi
          fi
          
          cat > deployment.json << EOF
          {
            "version": "${{ needs.release.outputs.version }}",
            "channel": "${{ needs.release.outputs.channel }}",
            "environment": "$ENV_NAME",
            "branch": "${{ github.ref }}",
            "dockerImage": "ghcr.io/${{ github.repository_owner }}/cardactions-api:${{ needs.release.outputs.version }}",
            "deploymentUrl": "$SERVICE_URL",
            "docsUrl": "$DOCS_URL",
            "deployedAt": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "note": "Application is hosted on Render.com and deployed from the ${{ needs.release.outputs.version }} version."
          }
          EOF
          
          echo "::notice title=Deployment Information::Version: ${{ needs.release.outputs.version }} | Environment: $ENV_NAME | URL: $SERVICE_URL | Branch: ${{ github.ref }}"
          
          echo "🚀 DEPLOYMENT SUCCESSFUL 🚀"
          echo "========================================"
          echo "✅ Version: ${{ needs.release.outputs.version }}"
          echo "✅ Channel: ${{ needs.release.outputs.channel }}"
          echo "✅ Environment: $ENV_NAME"
          echo "✅ Branch: ${{ github.ref }}"
          echo "✅ Docker Image: ghcr.io/${{ github.repository_owner }}/cardactions-api:${{ needs.release.outputs.version }}"
          echo "✅ Deployment URL: $SERVICE_URL"
          echo "✅ Documentation URL: $DOCS_URL"
          echo "========================================"

      - name: Upload Deployment Config
        uses: actions/upload-artifact@v4
        with:
          name: deployment-config-${{ needs.release.outputs.channel }}
          path: deployment.json
          retention-days: 30

      - name: Create Deployment Record
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Zamiast tworzyć tag deploy-, tworzymy wpis deployment w GitHub
            const environment = ${{ github.ref == 'refs/heads/main' && '"production"' || '"development"' }};
            const version = "${{ needs.release.outputs.version }}";
            const channel = "${{ needs.release.outputs.channel }}";
            
            try {
              // Utworzenie wpisu deployment w GitHub
              const deployment = await github.rest.repos.createDeployment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: context.sha,
                environment: environment,
                auto_merge: false,
                required_contexts: [],
                description: `Deployment of version ${version} to ${environment}`,
                transient_environment: environment !== "production",
                production_environment: environment === "production",
              });
            
              // Ustawienie statusu na "success"
              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: deployment.data.id,
                state: "success",
                environment_url: "${{ steps.service_details.outputs.service_url }}",
                description: `Deployed ${version} (${channel}) to ${environment}`,
                auto_inactive: true
              });
            
              console.log(`Created deployment record for ${version} to ${environment}`);
            } catch (error) {
              console.error("Failed to create deployment:", error);
            }
            
            // Dodajemy komentarz do ostatniego PR/commita
            try {
              // Pobierz ostatni PR
              const { data: pulls } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'closed',
                sort: 'updated',
                direction: 'desc',
                per_page: 1
              });
            
              if (pulls && pulls.length > 0) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pulls[0].number,
                  body: `🚀 Deployed version ${version} (${channel}) to ${environment} environment.\n\nURL: ${{ steps.service_details.outputs.service_url }}`
                });
              }
            } catch (error) {
              console.log("Unable to comment on PR:", error);
            }

  # 6. Cleanup starych obrazów Docker
  cleanup:
    needs: [ docker, deploy ]
    if: always() && needs.docker.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Delete untagged images
        uses: actions/delete-package-versions@v4
        with:
          package-name: 'cardactions-api'
          package-type: 'container'
          min-versions-to-keep: 10
          delete-only-untagged-versions: true

      - name: Delete old stable versions
        uses: actions/delete-package-versions@v4
        with:
          package-name: 'cardactions-api'
          package-type: 'container'
          min-versions-to-keep: 10
          delete-only-pre-release-versions: false
          ignore-versions: '^[0-9]+\.[0-9]+\.[0-9]+-beta\.[0-9]+$|^latest$|^beta$'

      - name: Delete old beta versions
        uses: actions/delete-package-versions@v4
        with:
          package-name: 'cardactions-api'
          package-type: 'container'
          min-versions-to-keep: 10
          delete-only-pre-release-versions: true
          ignore-versions: '^latest$|^beta$'

      - name: Delete old package with incorrect name format
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            try {
              // List packages for the repository
              const packages = await github.rest.packages.listPackagesForOrganization({
                package_type: 'container',
                org: owner
              });
            
              // Find the package with the old name format
              const oldPackage = packages.data.find(pkg => 
                pkg.name === 'cardactions.api/cardactions-api' || 
                pkg.name.includes('cardactions.api'));
            
              if (oldPackage) {
                console.log(`Found old package: ${oldPackage.name}`);
            
                // Delete the package
                await github.rest.packages.deletePackageForOrg({
                  package_type: 'container',
                  package_name: oldPackage.name,
                  org: owner
                });
            
                console.log(`Successfully deleted old package: ${oldPackage.name}`);
              } else {
                console.log('No old package with incorrect name format found.');
              }
            } catch (error) {
              console.log(`Error: ${error.message}`);
              // Don't fail the workflow if this step fails
            }