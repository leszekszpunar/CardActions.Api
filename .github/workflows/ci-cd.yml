name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**/*.md'
      - '.gitignore'
      - '.editorconfig'
      - 'docs/**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    
    - name: Build and Test
      run: |
        dotnet restore
        dotnet build --no-restore --configuration Release
        dotnet test --no-build --configuration Release --collect:"XPlat Code Coverage" --results-directory:./coverage

    - name: Generate Code Coverage Report
      uses: danielpalme/ReportGenerator-GitHub-Action@5.2.0
      with:
        reports: 'coverage/**/coverage.cobertura.xml'
        targetdir: 'coveragereport'
        reporttypes: 'HtmlInline;Cobertura'

    - name: Create Code Coverage Badge
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: coveragereport/Cobertura.xml
        badge: true
        format: markdown
        output: both
        thresholds: '60 80'

    - name: Upload Coverage Report
      uses: actions/upload-artifact@v4
      with:
        name: code-coverage-report
        path: coveragereport/

    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        path: code-coverage-summary.md

    - name: Publish
      run: dotnet publish src/CardActions.Api/CardActions.Api.csproj -c Release -o publish

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: api-artifact
        path: publish/

  docker:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ghcr.io/${{ github.repository }}/cardactions-api
        tags: |
          type=ref,event=branch
          type=sha,format=short
          type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
    
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-dev:
    if: github.ref == 'refs/heads/develop'
    needs: docker
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Create deployment package
      run: |
        mkdir -p deploy
        cp docker-compose.yml deploy/
        echo "DOCKER_IMAGE=ghcr.io/${{ github.repository }}/cardactions-api:develop" > deploy/.env
    
    - name: Upload deployment package
      uses: actions/upload-artifact@v4
      with:
        name: deploy-dev
        path: deploy/

  deploy-prod:
    if: github.ref == 'refs/heads/main'
    needs: docker
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Create deployment package
      run: |
        mkdir -p deploy
        cp docker-compose.yml deploy/
        echo "DOCKER_IMAGE=ghcr.io/${{ github.repository }}/cardactions-api:latest" > deploy/.env
    
    - name: Upload deployment package
      uses: actions/upload-artifact@v4
      with:
        name: deploy-prod
        path: deploy/ 