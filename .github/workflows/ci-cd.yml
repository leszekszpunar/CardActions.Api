name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**/*.md'
      - '.gitignore'
      - '.editorconfig'
      - 'docs/**'

permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: write
  id-token: write
  pages: write
  deployments: write

# Konfiguracja środowiska
env:
  DOCS_PATH: 'docs'
  GITHUB_PAGES_URL: '${{ github.repository_owner }}.github.io'
  REPOSITORY_NAME: '${{ github.event.repository.name }}'

jobs:
  # 1. Build i testy
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write  # dla testów
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    
    - name: Build and Test
      run: |
        dotnet restore
        dotnet build --no-restore --configuration Release
        dotnet test --no-build --configuration Release
        dotnet publish src/CardActions.Api/CardActions.Api.csproj -c Release -o publish

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: api-artifact
        path: publish/
        retention-days: 1

  # 2. Semantic Release
  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      packages: read
    outputs:
      version: ${{ steps.semantic.outputs.new_release_version }}
      channel: ${{ github.ref == 'refs/heads/main' && 'latest' || 'beta' }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        persist-credentials: false
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 'lts/*'
    
    - name: Install dependencies
      run: |
        npm install --no-package-lock --no-save \
          semantic-release@21.0.1 \
          @semantic-release/commit-analyzer \
          @semantic-release/release-notes-generator \
          @semantic-release/github \
          @semantic-release/exec \
          @semantic-release/changelog \
          @semantic-release/git
    
    - name: Semantic Release
      id: semantic
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Uruchom semantic-release i zapisz output
        SEMANTIC_OUTPUT=$(npx semantic-release)
        echo "Semantic Release Output: $SEMANTIC_OUTPUT"
        
        # Pobierz najnowszy tag
        VERSION=$(git describe --tags --abbrev=0)
        echo "Latest Tag: $VERSION"
        
        # Ustaw zmienną wyjściową
        echo "new_release_version=${VERSION#v}" >> $GITHUB_OUTPUT
        echo "Version Output: ${VERSION#v}"

  # 3. Build i push Docker image
  docker:
    needs: release
    if: needs.release.outputs.version != ''
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      security-events: write  # dla SBOM i provenance
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: api-artifact
        path: publish/
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ghcr.io/${{ github.repository_owner }}/cardactions-api
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=${{ needs.release.outputs.channel }}
          type=sha,prefix=${{ needs.release.outputs.channel }}-
        flavor: |
          latest=auto
          prefix=
          suffix=
        labels: |
          org.opencontainers.image.title=CardActions API
          org.opencontainers.image.description=Card Actions API for Millennium Project
          org.opencontainers.image.version=${{ needs.release.outputs.version }}
          org.opencontainers.image.created=${{ github.event.repository.updated_at }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.version.channel=${{ needs.release.outputs.channel }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.licenses=MIT
    
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: publish/
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: true
        sbom: true

  # 4. Deploy dokumentacji do GitHub Pages
  deploy-docs:
    needs: release
    if: needs.release.outputs.version != ''
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
      contents: read
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    outputs:
      page_url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        enablement: true
    
    - name: Prepare Documentation
      run: |
        mkdir -p docs-build
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          # Main branch - dokumentacja w głównym katalogu
          cp README.md docs-build/index.md
        else
          # Develop branch - dokumentacja w podkatalogu dev
          mkdir -p docs-build/dev
          cp README.md docs-build/dev/index.md
          # Dodaj przekierowanie w głównym katalogu
          echo "<meta http-equiv=\"refresh\" content=\"0; url=dev/\">" > docs-build/index.html
        fi
        
        # Dodaj config.json z informacjami o wersji
        cat > docs-build/config.json << EOF
        {
          "env": "${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}",
          "version": "${{ needs.release.outputs.version }}",
          "channel": "${{ needs.release.outputs.channel }}",
          "apiUrl": "ghcr.io/${{ github.repository_owner }}/cardactions-api:${{ needs.release.outputs.version }}"
        }
        EOF
    
    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: docs-build
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Display deployment URL
      run: |
        echo "Documentation deployed to: ${{ steps.deployment.outputs.page_url }}"
        echo "page_url=${{ steps.deployment.outputs.page_url }}" >> $GITHUB_OUTPUT

  # 5. Konfiguracja środowiska
  deploy:
    needs: [docker, release, deploy-docs]
    if: needs.release.outputs.version != ''
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
      url: ${{ needs.deploy-docs.outputs.page_url }}
    steps:
    - name: Create Deployment Config
      run: |
        # Oblicz URL dokumentacji
        DOCS_BASE_URL="${{ needs.deploy-docs.outputs.page_url }}"
        DOCS_URL="$DOCS_BASE_URL/${{ github.ref == 'refs/heads/main' && '' || 'dev' }}"
        
        cat > deployment.json << EOF
        {
          "version": "${{ needs.release.outputs.version }}",
          "channel": "${{ needs.release.outputs.channel }}",
          "environment": "${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}",
          "dockerImage": "ghcr.io/${{ github.repository_owner }}/cardactions-api:${{ needs.release.outputs.version }}",
          "docsUrl": "$DOCS_URL"
        }
        EOF
        
        echo "Configuration Summary:"
        echo "Version: ${{ needs.release.outputs.version }}"
        echo "Channel: ${{ needs.release.outputs.channel }}"
        echo "Environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}"
        echo "Docker Image: ghcr.io/${{ github.repository_owner }}/cardactions-api:${{ needs.release.outputs.version }}"
        echo "Documentation URL: $DOCS_URL"
    
    - name: Upload Deployment Config
      uses: actions/upload-artifact@v4
      with:
        name: deployment-config-${{ needs.release.outputs.channel }}
        path: deployment.json
        retention-days: 30

  # 6. Cleanup starych obrazów Docker
  cleanup:
    needs: [docker, deploy]
    if: always() && needs.docker.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Delete untagged images
        uses: actions/delete-package-versions@v4
        with:
          package-name: 'cardactions-api'
          package-type: 'container'
          min-versions-to-keep: 3
          delete-only-untagged-versions: true

      - name: Delete old stable versions
        uses: actions/delete-package-versions@v4
        with:
          package-name: 'cardactions-api'
          package-type: 'container'
          min-versions-to-keep: 3
          delete-only-pre-release-versions: false
          ignore-versions: '^[0-9]+\.[0-9]+\.[0-9]+-beta\.[0-9]+$'

      - name: Delete old beta versions
        uses: actions/delete-package-versions@v4
        with:
          package-name: 'cardactions-api'
          package-type: 'container'
          min-versions-to-keep: 3
          delete-only-pre-release-versions: true
