{
  "repository": {
    "type": "git",
    "url": "https://github.com/leszekszpunar/CardActions.Api.git"
  },
  "tagFormat": "v${version}",
  "branches": [
    {
      "name": "main",
      "channel": "latest"
    },
    {
      "name": "develop",
      "prerelease": "develop",
      "channel": "beta"
    }
  ],
  "plugins": [
    [
      "@semantic-release/commit-analyzer",
      {
        "preset": "angular",
        "releaseRules": [
          {
            "type": "feat",
            "release": "minor"
          },
          {
            "type": "fix",
            "release": "patch"
          },
          {
            "type": "perf",
            "release": "patch"
          },
          {
            "type": "docs",
            "release": "patch"
          },
          {
            "type": "style",
            "release": "patch"
          },
          {
            "type": "refactor",
            "release": "patch"
          },
          {
            "type": "test",
            "release": "patch"
          },
          {
            "type": "build",
            "release": "patch"
          },
          {
            "type": "ci",
            "release": "patch"
          },
          {
            "type": "chore",
            "release": "patch"
          },
          {
            "scope": "deps",
            "release": "patch"
          },
          {
            "scope": "no-release",
            "release": false
          },
          {
            "type": "*",
            "release": "patch"
          }
        ],
        "parserOpts": {
          "noteKeywords": [
            "BREAKING CHANGE",
            "BREAKING CHANGES",
            "BREAKING"
          ]
        }
      }
    ],
    "@semantic-release/release-notes-generator",
    [
      "@semantic-release/changelog",
      {
        "changelogFile": "CHANGELOG.md"
      }
    ],
    [
      "@semantic-release/exec",
      {
        "prepareCmd": "echo \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\n<Project>\n    <PropertyGroup>\n        <!-- Wersja semantyczna -->\n        <Version>${nextRelease.version}</Version>\n        \n        <!-- Wersja informacyjna z hashiem commita -->\n        <InformationalVersion>${nextRelease.version}+${process.env.GITHUB_SHA || 'local'}</InformationalVersion>\n        \n        <!-- Wersja assembly (xx.yy.0.0 format) -->\n        <AssemblyVersion>${nextRelease.version.split('.')[0]}.${nextRelease.version.split('.')[1]}.0.0</AssemblyVersion>\n        \n        <!-- Pełna wersja pliku -->\n        <FileVersion>${nextRelease.version}</FileVersion>\n        \n        <!-- Hash commita -->\n        <SourceRevisionId>${process.env.GITHUB_SHA || 'local'}</SourceRevisionId>\n        \n        <!-- Data wydania -->\n        <BuildDate>$( new Date().toISOString() )</BuildDate>\n        \n        <!-- Kanał wydania - użyj środowiska lokalnego, jeśli GITHUB_REF_NAME nie jest dostępny -->\n        <ReleaseChannel Condition=\\\"'$(Configuration)' == 'Release'\\\">production</ReleaseChannel>\n        <ReleaseChannel Condition=\\\"'$(Configuration)' != 'Release'\\\">development</ReleaseChannel>\n    </PropertyGroup>\n</Project>\" > version.props && cat version.props"
      }
    ],
    [
      "@semantic-release/exec",
      {
        "prepareCmd": "node -e \"const fs = require('fs'); const version = '${nextRelease.version}'; const branch = process.env.GITHUB_REF_NAME || ''; const commitHash = process.env.GITHUB_SHA || 'local'; const buildDate = new Date().toISOString(); const releaseChannel = branch === 'main' ? 'production' : 'development'; if (branch !== 'main' && fs.existsSync('CHANGELOG.md')) { fs.copyFileSync('CHANGELOG.md', 'CHANGELOG-develop.md'); } const readmePath = 'README.md'; if (fs.existsSync(readmePath)) { let content = fs.readFileSync(readmePath, 'utf8'); const badgeRegex = /\\[!Version\\]\\(.+?\\)/; if (badgeRegex.test(content)) { const newBadge = `[!Version](https://img.shields.io/badge/version-${version}-blue)`; content = content.replace(badgeRegex, newBadge); } const versionRegex = /(Current version|Version):\\s*(\\d+\\.\\d+\\.\\d+(?:-[a-zA-Z0-9.]+)?)(\\s*[\\r\\n]|$)/g; if (versionRegex.test(content)) { content = content.replace(versionRegex, (match, prefix, oldVersion, ending) => { return `${prefix}: ${version}${ending}`; }); } const detailsRegex = /## Version Details[\\s\\S]*?(?=##|$)/; const newVersionDetails = `## Version Details\\n\\n- **Version:** ${version}\\n- **Build:** ${version}+${commitHash.substring(0, 7)}\\n- **Release Channel:** ${releaseChannel}\\n- **Build Date:** ${buildDate}\\n- **Commit:** ${commitHash}\\n\\n`; if (detailsRegex.test(content)) { content = content.replace(detailsRegex, newVersionDetails); } else { // Dodaj sekcję Version Details przed pierwszą sekcją z ## (jeśli istnieje), lub na końcu pliku\\n const firstSectionRegex = /##\\s+[^#\\n]+/; if (firstSectionRegex.test(content)) { const firstSectionMatch = content.match(firstSectionRegex); const position = content.indexOf(firstSectionMatch[0]); content = content.slice(0, position) + newVersionDetails + content.slice(position); } else { content += '\\n' + newVersionDetails; } } fs.writeFileSync(readmePath, content, 'utf8'); }\""
      }
    ],
    [
      "@semantic-release/git",
      {
        "assets": [
          "CHANGELOG.md",
          "version.props",
          "README.md"
        ],
        "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
      }
    ],
    "@semantic-release/github"
  ]
}
