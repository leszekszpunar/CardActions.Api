{
  "repository": {
    "type": "git",
    "url": "https://github.com/leszekszpunar/CardActions.Api.git"
  },
  "tagFormat": "v${version}",
  "branches": [
    {
      "name": "main",
      "channel": "latest"
    },
    {
      "name": "develop",
      "prerelease": "beta",
      "channel": "beta"
    }
  ],
  "plugins": [
    [
      "@semantic-release/commit-analyzer",
      {
        "preset": "angular",
        "releaseRules": [
          {
            "type": "feat",
            "release": "minor"
          },
          {
            "type": "fix",
            "release": "patch"
          },
          {
            "type": "perf",
            "release": "patch"
          },
          {
            "type": "docs",
            "release": "patch"
          },
          {
            "type": "style",
            "release": "patch"
          },
          {
            "type": "refactor",
            "release": "patch"
          },
          {
            "type": "test",
            "release": "patch"
          },
          {
            "type": "build",
            "release": "patch"
          },
          {
            "type": "ci",
            "release": "patch"
          },
          {
            "type": "chore",
            "release": "patch"
          },
          {
            "scope": "deps",
            "release": "patch"
          },
          {
            "scope": "no-release",
            "release": false
          },
          {
            "type": "*",
            "release": "patch"
          }
        ],
        "parserOpts": {
          "noteKeywords": [
            "BREAKING CHANGE",
            "BREAKING CHANGES",
            "BREAKING"
          ]
        }
      }
    ],
    "@semantic-release/release-notes-generator",
    [
      "@semantic-release/changelog",
      {
        "changelogFile": "CHANGELOG.md"
      }
    ],
    [
      "@semantic-release/exec",
      {
        "prepareCmd": "echo \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\n<Project>\n    <PropertyGroup>\n        <!-- Wersja semantyczna dla NuGet -->\n        <Version>${nextRelease.version}</Version>\n        \n        <!-- Wersja informacyjna z hashiem commita -->\n        <InformationalVersion>${nextRelease.version}+${process.env.GITHUB_SHA || 'local'}</InformationalVersion>\n        \n        <!-- Wersja assembly (xx.yy.zz.ww format) - tylko numeryczna część bez prerelease -->\n        <AssemblyVersion>${nextRelease.version.split('-')[0].split('.')[0]}.${nextRelease.version.split('-')[0].split('.')[1]}.${nextRelease.version.split('-')[0].split('.')[2] || 0}.0</AssemblyVersion>\n        \n        <!-- Pełna wersja pliku - też tylko numeryczna część bez prerelease -->\n        <FileVersion>${nextRelease.version.split('-')[0]}</FileVersion>\n        \n        <!-- Hash commita -->\n        <SourceRevisionId>${process.env.GITHUB_SHA || 'local'}</SourceRevisionId>\n        \n        <!-- Data wydania -->\n        <BuildDate>$(date -u +\\\"%Y-%m-%dT%H:%M:%SZ\\\")</BuildDate>\n        \n        <!-- Kanał wydania -->\n        <ReleaseChannel>$([ \\\"$GITHUB_REF_NAME\\\" = \\\"main\\\" ] && echo \\\"production\\\" || echo \\\"development\\\")</ReleaseChannel>\n    </PropertyGroup>\n</Project>\" > version.props && cat version.props"
      }
    ],
    [
      "@semantic-release/exec",
      {
        "prepareCmd": "echo \"Updating README.md with version: ${nextRelease.version}\" && (if [ -f \"CHANGELOG.md\" ] && [ \"$GITHUB_REF_NAME\" != \"main\" ]; then cp CHANGELOG.md CHANGELOG-develop.md; fi)"
      }
    ],
    [
      "@semantic-release/git",
      {
        "assets": [
          "CHANGELOG.md",
          "version.props",
          "README.md"
        ],
        "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
      }
    ],
    "@semantic-release/github"
  ]
}
